{
  "address": "0xaac0C70f5bBCF2DfaFd3a22b941918fac3c8d242",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fullInvestmentIn",
          "type": "uint256"
        }
      ],
      "name": "estimateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "swapTokenOut",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmountOutMin",
          "type": "uint256"
        }
      ],
      "name": "zapInFromETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountOutMin",
          "type": "uint256"
        }
      ],
      "name": "zapInFromToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "zapInFromTokenWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "desiredToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "desiredTokenOutMin",
          "type": "uint256"
        }
      ],
      "name": "zapOutToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "desiredToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "desiredTokenOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "zapOutToTokenWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7980ef7e5aa4daf0535f6d0269268b9b7faaa08b70d18590c3f2bd4255fd14c5",
  "receipt": {
    "to": null,
    "from": "0xFD1Dc8Bf39Bc0e373068746787c1296a5aEF31Ee",
    "contractAddress": "0xaac0C70f5bBCF2DfaFd3a22b941918fac3c8d242",
    "transactionIndex": 2,
    "gasUsed": "2267198",
    "logsBloom": "0x
    "blockHash": "0x0002cff30000097b6d46cd3c89edd6b932994ae01fb1de6e363818404a02c3dc",
    "transactionHash": "0x7980ef7e5aa4daf0535f6d0269268b9b7faaa08b70d18590c3f2bd4255fd14c5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 53754736,
        "transactionHash": "0x7980ef7e5aa4daf0535f6d0269268b9b7faaa08b70d18590c3f2bd4255fd14c5",
        "address": "0xaac0C70f5bBCF2DfaFd3a22b941918fac3c8d242",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd1dc8bf39bc0e373068746787c1296a5aef31ee"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0002cff30000097b6d46cd3c89edd6b932994ae01fb1de6e363818404a02c3dc"
      }
    ],
    "blockNumber": 53754736,
    "cumulativeGasUsed": "2365126",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF491e7B69E4244ad4002BC14e878a34207E38c29",
    "0x6bADcf8184a760326528b11057C00952811f77af",
    "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83"
  ],
  "numDeployments": 1,
  "solcInputHash": "ca8a814f71c3d2faa524ae5be2451a49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fullInvestmentIn\",\"type\":\"uint256\"}],\"name\":\"estimateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapInFromETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOutMin\",\"type\":\"uint256\"}],\"name\":\"zapInFromToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapInFromTokenWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"desiredTokenOutMin\",\"type\":\"uint256\"}],\"name\":\"zapOutToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"desiredTokenOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"zapOutToTokenWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Wrap That Potassium <wrap-that-potassium@protonmail.com>\",\"details\":\"inspired by Beefy contract https://github.com/beefyfinance/beefy-contracts/blob/master/contracts/BIFI/zaps/BeefyZapUniswapV2.txt\",\"kind\":\"dev\",\"methods\":{\"estimateSwap(address,uint256)\":{\"params\":{\"fullInvestmentIn\":\"the input amount\",\"tokenIn\":\"the input token\"},\"returns\":{\"swapAmountIn\":\"the input amount which would be swapped\",\"swapAmountOut\":\"the output amount after such a swap\",\"swapTokenOut\":\"the address of the output token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"zapInFromETH(uint256)\":{\"params\":{\"tokenAmountOutMin\":\"the minimum amount of the other token from the pair expected with the swap\"}},\"zapInFromToken(address,uint256,uint256)\":{\"details\":\"this function assumes an approval for `tokenId` was done previously for this contract\",\"params\":{\"tokenAmountOutMin\":\"the minimum amount of the other token from the pair expected with the swap\",\"tokenIn\":\"the token to zap in from\",\"tokenInAmount\":\"the amount of `tokenIn` to create liquidity from\"}},\"zapInFromTokenWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"deadline for the swap\",\"r\":\"permit signature\",\"s\":\"permit signature\",\"tokenAmountOutMin\":\"the minimum amount of the other token from the pair expected with the swap\",\"tokenIn\":\"the token to zap in from\",\"tokenInAmount\":\"the amount of `tokenIn` to create liquidity from\",\"v\":\"permit signature\"}},\"zapOutToToken(uint256,address,uint256)\":{\"details\":\"this function assumes an approval for `tokenId` was done previously for this contract\",\"params\":{\"desiredToken\":\"the token to zap out to\",\"desiredTokenOutMin\":\"the minimum amount of the other token from the pair expected with the swap\",\"withdrawAmount\":\"amount of LP to withdraw\"}},\"zapOutToTokenWithPermit(uint256,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"deadline for the swap\",\"desiredToken\":\"the token to zap out to\",\"desiredTokenOutMin\":\"the minimum amount of the other token from the pair expected with the swap\",\"r\":\"permit signature\",\"s\":\"permit signature\",\"v\":\"permit signature\",\"withdrawAmount\":\"amount of LP to withdraw\"}}},\"title\":\"Zap in/out contract for wBAN farms\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateSwap(address,uint256)\":{\"notice\":\"Estimate a swap from `tokenIn` for amount `fullInvestmentIn`\"},\"zapInFromETH(uint256)\":{\"notice\":\"Zap in from \\\"ETH\\\".\"},\"zapInFromToken(address,uint256,uint256)\":{\"notice\":\"Zap in from token `tokenId`.\"},\"zapInFromTokenWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Zap in from token `tokenId`, using permit feature (EIP-2612).\"},\"zapOutToToken(uint256,address,uint256)\":{\"notice\":\"Zap out to token `desiredToken`.\"},\"zapOutToTokenWithPermit(uint256,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Zap out to token `desiredToken`, using permit feature (EIP-2612) of the LP token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WBANFarmZap.sol\":\"WBANFarmZap\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/Babylonian.sol\":{\"content\":\"pragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0xe20fc48e3575b4a2932e5d2dd53b6742e1ca96f652bd41038cb89d7f5d49a096\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xfc10758fd8dba790c39468dccd358cb7cef06ae7c4781832cc7aa76f91f167e6\"},\"contracts/WBANFarmZap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\n\\n/**\\n * @title Zap in/out contract for wBAN farms\\n * @author Wrap That Potassium <wrap-that-potassium@protonmail.com>\\n *\\n * @dev inspired by Beefy contract https://github.com/beefyfinance/beefy-contracts/blob/master/contracts/BIFI/zaps/BeefyZapUniswapV2.txt\\n */\\ncontract WBANFarmZap is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Router02 public immutable router;\\n    IUniswapV2Pair public immutable pair;\\n    address public immutable WETH;\\n\\n    constructor(\\n        IUniswapV2Router02 _router,\\n        IUniswapV2Pair _pair,\\n        address _WETH\\n    ) {\\n        // safety checks to ensure WETH token address\\n        IWETH(_WETH).deposit{value: 0}();\\n        IWETH(_WETH).withdraw(0);\\n\\n        router = _router;\\n        pair = _pair;\\n        WETH = _WETH;\\n    }\\n\\n    /**\\n     * @dev needed in order to received ETH and then send them back to the user.\\n     */\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n    }\\n\\n    /**\\n     * @notice Zap in from token `tokenId`.\\n     * @param tokenIn the token to zap in from\\n     * @param tokenInAmount the amount of `tokenIn` to create liquidity from\\n     * @param tokenAmountOutMin the minimum amount of the other token from the pair expected with the swap\\n     * @dev this function assumes an approval for `tokenId` was done previously for this contract\\n     */\\n    function zapInFromToken(\\n        IERC20 tokenIn,\\n        uint256 tokenInAmount,\\n        uint256 tokenAmountOutMin\\n    ) external {\\n        require(IERC20(tokenIn).allowance(msg.sender, address(this)) >= tokenInAmount, \\\"Input token is not approved\\\");\\n        tokenIn.safeTransferFrom(msg.sender, address(this), tokenInAmount);\\n        _swapAndAddLiquidity(address(tokenIn), tokenAmountOutMin);\\n    }\\n\\n    /**\\n     * @notice Zap in from token `tokenId`, using permit feature (EIP-2612).\\n     * @param tokenIn the token to zap in from\\n     * @param tokenInAmount the amount of `tokenIn` to create liquidity from\\n     * @param tokenAmountOutMin the minimum amount of the other token from the pair expected with the swap\\n     * @param deadline deadline for the swap\\n     * @param v permit signature\\n     * @param r permit signature\\n     * @param s permit signature\\n     */\\n    function zapInFromTokenWithPermit(\\n        IERC20 tokenIn,\\n        uint256 tokenInAmount,\\n        uint256 tokenAmountOutMin,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        IERC20Permit(address(tokenIn)).permit(msg.sender, address(this), tokenInAmount, deadline, v, r, s);\\n        tokenIn.safeTransferFrom(msg.sender, address(this), tokenInAmount);\\n        _swapAndAddLiquidity(address(tokenIn), tokenAmountOutMin);\\n    }\\n\\n    /**\\n     * @notice Zap in from \\\"ETH\\\".\\n     * @param tokenAmountOutMin the minimum amount of the other token from the pair expected with the swap\\n     */\\n    function zapInFromETH(uint256 tokenAmountOutMin) external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n        _swapAndAddLiquidity(WETH, tokenAmountOutMin);\\n    }\\n\\n    /**\\n     * @notice Zap out to token `desiredToken`, using permit feature (EIP-2612) of the LP token.\\n     * @param withdrawAmount amount of LP to withdraw\\n     * @param desiredToken the token to zap out to\\n     * @param desiredTokenOutMin the minimum amount of the other token from the pair expected with the swap\\n     * @param deadline deadline for the swap\\n     * @param v permit signature\\n     * @param r permit signature\\n     * @param s permit signature\\n     */\\n    function zapOutToTokenWithPermit(\\n        uint256 withdrawAmount,\\n        address desiredToken,\\n        uint256 desiredTokenOutMin,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        IERC20Permit(address(pair)).permit(msg.sender, address(this), withdrawAmount, deadline, v, r, s);\\n        zapOutToToken(withdrawAmount, desiredToken, desiredTokenOutMin);\\n    }\\n\\n    /**\\n     * @notice Zap out to token `desiredToken`.\\n     * @param withdrawAmount amount of LP to withdraw\\n     * @param desiredToken the token to zap out to\\n     * @param desiredTokenOutMin the minimum amount of the other token from the pair expected with the swap\\n     * @dev this function assumes an approval for `tokenId` was done previously for this contract\\n     */\\n    function zapOutToToken(\\n        uint256 withdrawAmount,\\n        address desiredToken,\\n        uint256 desiredTokenOutMin\\n    ) public {\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        require(token0 == desiredToken || token1 == desiredToken, \\\"Zap: desired token not present in liquidity pair\\\");\\n\\n        IERC20(address(pair)).safeTransferFrom(msg.sender, address(this), withdrawAmount);\\n        _removeLiquidity(address(this));\\n\\n        address swapToken = token1 == desiredToken ? token0 : token1;\\n        address[] memory path = new address[](2);\\n        path[0] = swapToken;\\n        path[1] = desiredToken;\\n\\n        _approveTokenIfNeeded(path[0], address(router));\\n        router.swapExactTokensForTokens(\\n            IERC20(swapToken).balanceOf(address(this)),\\n            desiredTokenOutMin,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        _returnAssets(path);\\n    }\\n\\n    /**\\n     * @notice Estimate a swap from `tokenIn` for amount `fullInvestmentIn`\\n     * @param tokenIn the input token\\n     * @param fullInvestmentIn the input amount\\n     * @return swapAmountIn the input amount which would be swapped\\n     * @return swapAmountOut the output amount after such a swap\\n     * @return swapTokenOut the address of the output token\\n     */\\n    function estimateSwap(address tokenIn, uint256 fullInvestmentIn)\\n        public\\n        view\\n        returns (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut,\\n            address swapTokenOut\\n        )\\n    {\\n        bool isInputA = pair.token0() == tokenIn;\\n        require(isInputA || pair.token1() == tokenIn, \\\"Zap: Input token not present in liquidity pair\\\");\\n\\n        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\\n        (reserveA, reserveB) = isInputA ? (reserveA, reserveB) : (reserveB, reserveA);\\n\\n        swapAmountIn = _getSwapAmount(fullInvestmentIn, reserveA, reserveB);\\n        swapAmountOut = router.getAmountOut(swapAmountIn, reserveA, reserveB);\\n        swapTokenOut = isInputA ? pair.token1() : pair.token0();\\n    }\\n\\n    /**\\n     * Swap optimal amount of `tokenIn` based on reserved to the other token of the pair\\n     * and provide liquidity.\\n     * @param tokenIn the input token\\n     * @param tokenAmountOutMin the minimal expected amount of the other token after a partial swap\\n     */\\n    function _swapAndAddLiquidity(address tokenIn, uint256 tokenAmountOutMin) internal {\\n        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\\n        bool isInputA = pair.token0() == tokenIn;\\n        require(isInputA || pair.token1() == tokenIn, \\\"Zap: input token not present in liquidity pair\\\");\\n\\n        address[] memory path = new address[](2);\\n        path[0] = tokenIn;\\n        path[1] = isInputA ? pair.token1() : pair.token0();\\n\\n        uint256 fullInvestment = IERC20(tokenIn).balanceOf(address(this));\\n        uint256 swapAmountIn;\\n        if (isInputA) {\\n            swapAmountIn = _getSwapAmount(fullInvestment, reserveA, reserveB);\\n        } else {\\n            swapAmountIn = _getSwapAmount(fullInvestment, reserveB, reserveA);\\n        }\\n\\n        _approveTokenIfNeeded(path[0], address(router));\\n        uint256[] memory swapedAmounts =\\n            router.swapExactTokensForTokens(swapAmountIn, tokenAmountOutMin, path, address(this), block.timestamp);\\n\\n        _approveTokenIfNeeded(path[1], address(router));\\n        (, , uint256 amountLiquidity) =\\n            router.addLiquidity(\\n                path[0],\\n                path[1],\\n                fullInvestment - swapedAmounts[0],\\n                swapedAmounts[1],\\n                1,\\n                1,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        IERC20(address(pair)).safeTransfer(msg.sender, amountLiquidity);\\n        _returnAssets(path);\\n    }\\n\\n    /**\\n     * Remove liquidity from the pool\\n     * @return amount0 the amount of token0\\n     * @return amount1 the amount of token1\\n     */\\n    function _removeLiquidity(address to) private returns (uint256, uint256) {\\n        IERC20(address(pair)).safeTransfer(address(pair), IERC20(address(pair)).balanceOf(address(this)));\\n        (uint256 amount0, uint256 amount1) = pair.burn(to);\\n        return (amount0, amount1);\\n    }\\n\\n    function _getSwapAmount(\\n        uint256 investmentA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) private view returns (uint256 swapAmount) {\\n        uint256 halfInvestment = investmentA / 2;\\n        uint256 nominator = router.getAmountOut(halfInvestment, reserveA, reserveB);\\n        uint256 denominator = router.quote(halfInvestment, reserveA + halfInvestment, reserveB - nominator);\\n        swapAmount = investmentA - Babylonian.sqrt((halfInvestment * halfInvestment * nominator) / denominator);\\n    }\\n\\n    /**\\n     * Return user assets\\n     * @dev if WETH is involved it is unwrapped, so user gets back \\\"ETH\\\"\\n     */\\n    function _returnAssets(address[] memory tokens) private {\\n        uint256 balance;\\n        for (uint256 i; i < tokens.length; i++) {\\n            balance = IERC20(tokens[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                if (tokens[i] == WETH) {\\n                    IWETH(WETH).withdraw(balance);\\n                    (bool success, ) = msg.sender.call{value: balance}(new bytes(0));\\n                    require(success, \\\"ETH transfer failed\\\");\\n                } else {\\n                    IERC20(tokens[i]).safeTransfer(msg.sender, balance);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address spender) private {\\n        if (IERC20(token).allowance(address(this), spender) == 0) {\\n            IERC20(token).safeApprove(spender, type(uint256).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36e10f66fcd7aa88fe0c6224124963a7d81ea10244a14e5c6fd7639f038f0adb\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002a8038038062002a8083398101604081905262000034916200018d565b6200003f3362000124565b6000805460ff60a01b1916815560408051630d0e30db60e41b815290516001600160a01b0384169263d0e30db09290916004808301928492919082900301818388803b1580156200008f57600080fd5b505af1158015620000a4573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b8152600060048201526001600160a01b0385169350632e1a7d4d92506024019050600060405180830381600087803b158015620000ed57600080fd5b505af115801562000102573d6000803e3d6000fd5b5050506001600160a01b039384166080525090821660a0521660c052620001e1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200018a57600080fd5b50565b600080600060608486031215620001a357600080fd5b8351620001b08162000174565b6020850151909350620001c38162000174565b6040850151909250620001d68162000174565b809150509250925092565b60805160a05160c05161279e620002e26000396000818160e60152818161026b01528181610d0e01528181610d850152818161197501526119f4015260008181610237015281816103fe01528181610484015281816105bb01528181610810015281816108af015281816109b101528181610b3101528181610bb801528181610c9d01528181610fd80152818161108b0152818161112a015281816112830152818161130a01528181611692015281816116ec0152818161176b01526117cf015260008181610312015281816106bf0152818161070001528181610ab5015281816114890152818161152901528181611c750152611cee015261279e6000f3fe6080604052600436106100d65760003560e01c8063a8aa1b311161007f578063e233ef4c11610059578063e233ef4c146102ad578063eacc526d146102c0578063f2fde38b146102e0578063f887ea401461030057600080fd5b8063a8aa1b3114610225578063ad5c464814610259578063db7a69571461028d57600080fd5b8063715018a6116100b0578063715018a61461019a5780638da5cb5b146101af578063a7927d06146101e157600080fd5b80634627c6021461011a578063507cabd21461013a5780635c975abb1461015a57600080fd5b3661011557336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461011357610113612256565b005b600080fd5b34801561012657600080fd5b50610113610135366004612292565b610334565b34801561014657600080fd5b506101136101553660046122f7565b6103fa565b34801561016657600080fd5b5060005474010000000000000000000000000000000000000000900460ff1660405190151581526020015b60405180910390f35b3480156101a657600080fd5b506101136107ea565b3480156101bb57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610191565b3480156101ed57600080fd5b506102016101fc36600461232f565b6107fe565b6040805193845260208401929092526001600160a01b031690820152606001610191565b34801561023157600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561026557600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561029957600080fd5b506101136102a836600461235b565b610c44565b6101136102bb3660046123a4565b610d0c565b3480156102cc57600080fd5b506101136102db3660046123bd565b610dad565b3480156102ec57600080fd5b506101136102fb3660046123f2565b610e8f565b34801561030c57600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810185905260ff8416608482015260a4810183905260c481018290526001600160a01b0388169063d505accf9060e401600060405180830381600087803b1580156103b957600080fd5b505af11580156103cd573d6000803e3d6000fd5b506103e7925050506001600160a01b038816333089610f1c565b6103f18786610fd3565b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190612416565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190612416565b9050836001600160a01b0316826001600160a01b031614806105375750836001600160a01b0316816001600160a01b0316145b6105ae5760405162461bcd60e51b815260206004820152603060248201527f5a61703a206465736972656420746f6b656e206e6f742070726573656e74206960448201527f6e206c697175696469747920706169720000000000000000000000000000000060648201526084015b60405180910390fd5b6105e36001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088610f1c565b6105ec306116ce565b50506000846001600160a01b0316826001600160a01b03161461060f5781610611565b825b6040805160028082526060820183529293506000929091602083019080368337019050509050818160008151811061064b5761064b612449565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061067f5761067f612449565b60200260200101906001600160a01b031690816001600160a01b0316815250506106e3816000815181106106b5576106b5612449565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000611847565b6040516370a0823160e01b81523060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916338ed1739918516906370a0823190602401602060405180830381865afa158015610751573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610775919061245f565b878430426040518663ffffffff1660e01b8152600401610799959493929190612478565b6000604051808303816000875af11580156107b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107e091908101906124e9565b506103f1816118d8565b6107f2611b5a565b6107fc6000611bb4565b565b600080600080856001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190612416565b6001600160a01b0316149050808061093a5750856001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f9190612416565b6001600160a01b0316145b6109ac5760405162461bcd60e51b815260206004820152602e60248201527f5a61703a20496e70757420746f6b656e206e6f742070726573656e7420696e2060448201527f6c6971756964697479207061697200000000000000000000000000000000000060648201526084016105a5565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3191906125c5565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915082610a62578082610a65565b81815b9092509050610a75878383611c1c565b6040517f054d50d40000000000000000000000000000000000000000000000000000000081526004810182905260248101849052604481018390529096507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063054d50d490606401602060405180830381865afa158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b28919061245f565b945082610bb6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb19190612416565b610c38565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190612416565b93505050509250925092565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610ce957600080fd5b505af1158015610cfd573d6000803e3d6000fd5b505050506103f18787876103fa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b5050505050610daa7f000000000000000000000000000000000000000000000000000000000000000082610fd3565b50565b604051636eb1769f60e11b815233600482015230602482015282906001600160a01b0385169063dd62ed3e90604401602060405180830381865afa158015610df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d919061245f565b1015610e6b5760405162461bcd60e51b815260206004820152601b60248201527f496e70757420746f6b656e206973206e6f7420617070726f766564000000000060448201526064016105a5565b610e806001600160a01b038416333085610f1c565b610e8a8382610fd3565b505050565b610e97611b5a565b6001600160a01b038116610f135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105a5565b610daa81611bb4565b6040516001600160a01b0380851660248301528316604482015260648101829052610fcd9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dec565b50505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105891906125c5565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190612416565b6001600160a01b031614905080806111b55750846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190612416565b6001600160a01b0316145b6112275760405162461bcd60e51b815260206004820152602e60248201527f5a61703a20696e70757420746f6b656e206e6f742070726573656e7420696e2060448201527f6c6971756964697479207061697200000000000000000000000000000000000060648201526084016105a5565b604080516002808252606082018352600092602083019080368337019050509050858160008151811061125c5761125c612449565b60200260200101906001600160a01b031690816001600160a01b03168152505081611308577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113039190612416565b61138a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138a9190612416565b8160018151811061139d5761139d612449565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b81523060048201526000918816906370a0823190602401602060405180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611416919061245f565b9050600083156114325761142b828787611c1c565b9050611440565b61143d828688611c1c565b90505b611456836000815181106106b5576106b5612449565b6040517f38ed17390000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed1739906114c69085908c90899030904290600401612478565b6000604051808303816000875af11580156114e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261150d91908101906124e9565b9050611525846001815181106106b5576106b5612449565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8e337008660008151811061156957611569612449565b60200260200101518760018151811061158457611584612449565b60200260200101518560008151811061159f5761159f612449565b6020026020010151886115b2919061262b565b866001815181106115c5576115c5612449565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260016084820181905260a48201523060c48201524260e4820152610104016060604051808303816000875af115801561165c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116809190612644565b92506116b99150506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611ed1565b6116c2856118d8565b50505050505050505050565b6040516370a0823160e01b81523060048201526000908190611792907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906370a0823190602401602060405180830381865afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611761919061245f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611ed1565b6040517f89afcb440000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906389afcb449060240160408051808303816000875af1158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190612672565b90969095509350505050565b604051636eb1769f60e11b81523060048201526001600160a01b03828116602483015283169063dd62ed3e90604401602060405180830381865afa158015611893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b7919061245f565b6000036118d4576118d46001600160a01b03831682600019611f1a565b5050565b6000805b8251811015610e8a578281815181106118f7576118f7612449565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196b919061245f565b91508115611b48577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168382815181106119af576119af612449565b60200260200101516001600160a01b031603611b11576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611a4057600080fd5b505af1158015611a54573d6000803e3d6000fd5b5050604080516000808252602082019283905293503392508591611a7891906126ba565b60006040518083038185875af1925050503d8060008114611ab5576040519150601f19603f3d011682016040523d82523d6000602084013e611aba565b606091505b5050905080611b0b5760405162461bcd60e51b815260206004820152601360248201527f455448207472616e73666572206661696c65640000000000000000000000000060448201526064016105a5565b50611b48565b611b483383858481518110611b2857611b28612449565b60200260200101516001600160a01b0316611ed19092919063ffffffff16565b80611b52816126d6565b9150506118dc565b6000546001600160a01b031633146107fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a5565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080611c2a6002866126f0565b6040517f054d50d40000000000000000000000000000000000000000000000000000000081526004810182905260248101869052604481018590529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063054d50d490606401602060405180830381865afa158015611cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce0919061245f565b905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ad615dec84611d1e818a612712565b611d28868a61262b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015611d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dad919061245f565b9050611dd78183611dbe8680612725565b611dc89190612725565b611dd291906126f0565b61204f565b611de1908861262b565b979650505050505050565b6000611e41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120bf9092919063ffffffff16565b805190915015610e8a5780806020019051810190611e5f919061273c565b610e8a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105a5565b6040516001600160a01b038316602482015260448101829052610e8a9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610f69565b801580611f945750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f92919061245f565b155b6120065760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016105a5565b6040516001600160a01b038316602482015260448101829052610e8a9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610f69565b600060038211156120b057508060006120696002836126f0565b612074906001612712565b90505b818110156120aa5790508060028161208f81866126f0565b6120999190612712565b6120a391906126f0565b9050612077565b50919050565b81156120ba575060015b919050565b60606120ce84846000856120d6565b949350505050565b60608247101561214e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105a5565b600080866001600160a01b0316858760405161216a91906126ba565b60006040518083038185875af1925050503d80600081146121a7576040519150601f19603f3d011682016040523d82523d6000602084013e6121ac565b606091505b5091509150611de18783838760608315612227578251600003612220576001600160a01b0385163b6122205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a5565b50816120ce565b6120ce838381511561223c5781518083602001fd5b8060405162461bcd60e51b81526004016105a5919061275e565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114610daa57600080fd5b803560ff811681146120ba57600080fd5b600080600080600080600060e0888a0312156122ad57600080fd5b87356122b88161226c565b96506020880135955060408801359450606088013593506122db60808901612281565b925060a0880135915060c0880135905092959891949750929550565b60008060006060848603121561230c57600080fd5b83359250602084013561231e8161226c565b929592945050506040919091013590565b6000806040838503121561234257600080fd5b823561234d8161226c565b946020939093013593505050565b600080600080600080600060e0888a03121561237657600080fd5b8735965060208801356123888161226c565b955060408801359450606088013593506122db60808901612281565b6000602082840312156123b657600080fd5b5035919050565b6000806000606084860312156123d257600080fd5b83356123dd8161226c565b95602085013595506040909401359392505050565b60006020828403121561240457600080fd5b813561240f8161226c565b9392505050565b60006020828403121561242857600080fd5b815161240f8161226c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561247157600080fd5b5051919050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156124c85784516001600160a01b0316835293830193918301916001016124a3565b50506001600160a01b03969096166060850152505050608001529392505050565b600060208083850312156124fc57600080fd5b825167ffffffffffffffff8082111561251457600080fd5b818501915085601f83011261252857600080fd5b81518181111561253a5761253a612433565b8060051b604051601f19603f8301168101818110858211171561255f5761255f612433565b60405291825284820192508381018501918883111561257d57600080fd5b938501935b8285101561259b57845184529385019392850192612582565b98975050505050505050565b80516dffffffffffffffffffffffffffff811681146120ba57600080fd5b6000806000606084860312156125da57600080fd5b6125e3846125a7565b92506125f1602085016125a7565b9150604084015163ffffffff8116811461260a57600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b8181038181111561263e5761263e612615565b92915050565b60008060006060848603121561265957600080fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561268557600080fd5b505080516020909101519092909150565b60005b838110156126b1578181015183820152602001612699565b50506000910152565b600082516126cc818460208701612696565b9190910192915050565b600060001982036126e9576126e9612615565b5060010190565b60008261270d57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561263e5761263e612615565b808202811582820484141761263e5761263e612615565b60006020828403121561274e57600080fd5b8151801515811461240f57600080fd5b602081526000825180602084015261277d816040850160208701612696565b601f01601f1916919091016040019291505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106100d65760003560e01c8063a8aa1b311161007f578063e233ef4c11610059578063e233ef4c146102ad578063eacc526d146102c0578063f2fde38b146102e0578063f887ea401461030057600080fd5b8063a8aa1b3114610225578063ad5c464814610259578063db7a69571461028d57600080fd5b8063715018a6116100b0578063715018a61461019a5780638da5cb5b146101af578063a7927d06146101e157600080fd5b80634627c6021461011a578063507cabd21461013a5780635c975abb1461015a57600080fd5b3661011557336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461011357610113612256565b005b600080fd5b34801561012657600080fd5b50610113610135366004612292565b610334565b34801561014657600080fd5b506101136101553660046122f7565b6103fa565b34801561016657600080fd5b5060005474010000000000000000000000000000000000000000900460ff1660405190151581526020015b60405180910390f35b3480156101a657600080fd5b506101136107ea565b3480156101bb57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610191565b3480156101ed57600080fd5b506102016101fc36600461232f565b6107fe565b6040805193845260208401929092526001600160a01b031690820152606001610191565b34801561023157600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561026557600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561029957600080fd5b506101136102a836600461235b565b610c44565b6101136102bb3660046123a4565b610d0c565b3480156102cc57600080fd5b506101136102db3660046123bd565b610dad565b3480156102ec57600080fd5b506101136102fb3660046123f2565b610e8f565b34801561030c57600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810185905260ff8416608482015260a4810183905260c481018290526001600160a01b0388169063d505accf9060e401600060405180830381600087803b1580156103b957600080fd5b505af11580156103cd573d6000803e3d6000fd5b506103e7925050506001600160a01b038816333089610f1c565b6103f18786610fd3565b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190612416565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190612416565b9050836001600160a01b0316826001600160a01b031614806105375750836001600160a01b0316816001600160a01b0316145b6105ae5760405162461bcd60e51b815260206004820152603060248201527f5a61703a206465736972656420746f6b656e206e6f742070726573656e74206960448201527f6e206c697175696469747920706169720000000000000000000000000000000060648201526084015b60405180910390fd5b6105e36001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088610f1c565b6105ec306116ce565b50506000846001600160a01b0316826001600160a01b03161461060f5781610611565b825b6040805160028082526060820183529293506000929091602083019080368337019050509050818160008151811061064b5761064b612449565b60200260200101906001600160a01b031690816001600160a01b031681525050858160018151811061067f5761067f612449565b60200260200101906001600160a01b031690816001600160a01b0316815250506106e3816000815181106106b5576106b5612449565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000611847565b6040516370a0823160e01b81523060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916338ed1739918516906370a0823190602401602060405180830381865afa158015610751573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610775919061245f565b878430426040518663ffffffff1660e01b8152600401610799959493929190612478565b6000604051808303816000875af11580156107b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107e091908101906124e9565b506103f1816118d8565b6107f2611b5a565b6107fc6000611bb4565b565b600080600080856001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190612416565b6001600160a01b0316149050808061093a5750856001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f9190612416565b6001600160a01b0316145b6109ac5760405162461bcd60e51b815260206004820152602e60248201527f5a61703a20496e70757420746f6b656e206e6f742070726573656e7420696e2060448201527f6c6971756964697479207061697200000000000000000000000000000000000060648201526084016105a5565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3191906125c5565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915082610a62578082610a65565b81815b9092509050610a75878383611c1c565b6040517f054d50d40000000000000000000000000000000000000000000000000000000081526004810182905260248101849052604481018390529096507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063054d50d490606401602060405180830381865afa158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b28919061245f565b945082610bb6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb19190612416565b610c38565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190612416565b93505050509250925092565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610ce957600080fd5b505af1158015610cfd573d6000803e3d6000fd5b505050506103f18787876103fa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b5050505050610daa7f000000000000000000000000000000000000000000000000000000000000000082610fd3565b50565b604051636eb1769f60e11b815233600482015230602482015282906001600160a01b0385169063dd62ed3e90604401602060405180830381865afa158015610df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d919061245f565b1015610e6b5760405162461bcd60e51b815260206004820152601b60248201527f496e70757420746f6b656e206973206e6f7420617070726f766564000000000060448201526064016105a5565b610e806001600160a01b038416333085610f1c565b610e8a8382610fd3565b505050565b610e97611b5a565b6001600160a01b038116610f135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105a5565b610daa81611bb4565b6040516001600160a01b0380851660248301528316604482015260648101829052610fcd9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dec565b50505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105891906125c5565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110b9190612416565b6001600160a01b031614905080806111b55750846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190612416565b6001600160a01b0316145b6112275760405162461bcd60e51b815260206004820152602e60248201527f5a61703a20696e70757420746f6b656e206e6f742070726573656e7420696e2060448201527f6c6971756964697479207061697200000000000000000000000000000000000060648201526084016105a5565b604080516002808252606082018352600092602083019080368337019050509050858160008151811061125c5761125c612449565b60200260200101906001600160a01b031690816001600160a01b03168152505081611308577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113039190612416565b61138a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138a9190612416565b8160018151811061139d5761139d612449565b6001600160a01b0392831660209182029290920101526040516370a0823160e01b81523060048201526000918816906370a0823190602401602060405180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611416919061245f565b9050600083156114325761142b828787611c1c565b9050611440565b61143d828688611c1c565b90505b611456836000815181106106b5576106b5612449565b6040517f38ed17390000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed1739906114c69085908c90899030904290600401612478565b6000604051808303816000875af11580156114e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261150d91908101906124e9565b9050611525846001815181106106b5576106b5612449565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e8e337008660008151811061156957611569612449565b60200260200101518760018151811061158457611584612449565b60200260200101518560008151811061159f5761159f612449565b6020026020010151886115b2919061262b565b866001815181106115c5576115c5612449565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260016084820181905260a48201523060c48201524260e4820152610104016060604051808303816000875af115801561165c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116809190612644565b92506116b99150506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611ed1565b6116c2856118d8565b50505050505050505050565b6040516370a0823160e01b81523060048201526000908190611792907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906370a0823190602401602060405180830381865afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611761919061245f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611ed1565b6040517f89afcb440000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906389afcb449060240160408051808303816000875af1158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190612672565b90969095509350505050565b604051636eb1769f60e11b81523060048201526001600160a01b03828116602483015283169063dd62ed3e90604401602060405180830381865afa158015611893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b7919061245f565b6000036118d4576118d46001600160a01b03831682600019611f1a565b5050565b6000805b8251811015610e8a578281815181106118f7576118f7612449565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196b919061245f565b91508115611b48577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168382815181106119af576119af612449565b60200260200101516001600160a01b031603611b11576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015611a4057600080fd5b505af1158015611a54573d6000803e3d6000fd5b5050604080516000808252602082019283905293503392508591611a7891906126ba565b60006040518083038185875af1925050503d8060008114611ab5576040519150601f19603f3d011682016040523d82523d6000602084013e611aba565b606091505b5050905080611b0b5760405162461bcd60e51b815260206004820152601360248201527f455448207472616e73666572206661696c65640000000000000000000000000060448201526064016105a5565b50611b48565b611b483383858481518110611b2857611b28612449565b60200260200101516001600160a01b0316611ed19092919063ffffffff16565b80611b52816126d6565b9150506118dc565b6000546001600160a01b031633146107fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a5565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080611c2a6002866126f0565b6040517f054d50d40000000000000000000000000000000000000000000000000000000081526004810182905260248101869052604481018590529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063054d50d490606401602060405180830381865afa158015611cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce0919061245f565b905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ad615dec84611d1e818a612712565b611d28868a61262b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015611d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dad919061245f565b9050611dd78183611dbe8680612725565b611dc89190612725565b611dd291906126f0565b61204f565b611de1908861262b565b979650505050505050565b6000611e41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120bf9092919063ffffffff16565b805190915015610e8a5780806020019051810190611e5f919061273c565b610e8a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105a5565b6040516001600160a01b038316602482015260448101829052610e8a9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610f69565b801580611f945750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f92919061245f565b155b6120065760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016105a5565b6040516001600160a01b038316602482015260448101829052610e8a9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610f69565b600060038211156120b057508060006120696002836126f0565b612074906001612712565b90505b818110156120aa5790508060028161208f81866126f0565b6120999190612712565b6120a391906126f0565b9050612077565b50919050565b81156120ba575060015b919050565b60606120ce84846000856120d6565b949350505050565b60608247101561214e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105a5565b600080866001600160a01b0316858760405161216a91906126ba565b60006040518083038185875af1925050503d80600081146121a7576040519150601f19603f3d011682016040523d82523d6000602084013e6121ac565b606091505b5091509150611de18783838760608315612227578251600003612220576001600160a01b0385163b6122205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a5565b50816120ce565b6120ce838381511561223c5781518083602001fd5b8060405162461bcd60e51b81526004016105a5919061275e565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114610daa57600080fd5b803560ff811681146120ba57600080fd5b600080600080600080600060e0888a0312156122ad57600080fd5b87356122b88161226c565b96506020880135955060408801359450606088013593506122db60808901612281565b925060a0880135915060c0880135905092959891949750929550565b60008060006060848603121561230c57600080fd5b83359250602084013561231e8161226c565b929592945050506040919091013590565b6000806040838503121561234257600080fd5b823561234d8161226c565b946020939093013593505050565b600080600080600080600060e0888a03121561237657600080fd5b8735965060208801356123888161226c565b955060408801359450606088013593506122db60808901612281565b6000602082840312156123b657600080fd5b5035919050565b6000806000606084860312156123d257600080fd5b83356123dd8161226c565b95602085013595506040909401359392505050565b60006020828403121561240457600080fd5b813561240f8161226c565b9392505050565b60006020828403121561242857600080fd5b815161240f8161226c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561247157600080fd5b5051919050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156124c85784516001600160a01b0316835293830193918301916001016124a3565b50506001600160a01b03969096166060850152505050608001529392505050565b600060208083850312156124fc57600080fd5b825167ffffffffffffffff8082111561251457600080fd5b818501915085601f83011261252857600080fd5b81518181111561253a5761253a612433565b8060051b604051601f19603f8301168101818110858211171561255f5761255f612433565b60405291825284820192508381018501918883111561257d57600080fd5b938501935b8285101561259b57845184529385019392850192612582565b98975050505050505050565b80516dffffffffffffffffffffffffffff811681146120ba57600080fd5b6000806000606084860312156125da57600080fd5b6125e3846125a7565b92506125f1602085016125a7565b9150604084015163ffffffff8116811461260a57600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b8181038181111561263e5761263e612615565b92915050565b60008060006060848603121561265957600080fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561268557600080fd5b505080516020909101519092909150565b60005b838110156126b1578181015183820152602001612699565b50506000910152565b600082516126cc818460208701612696565b9190910192915050565b600060001982036126e9576126e9612615565b5060010190565b60008261270d57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561263e5761263e612615565b808202811582820484141761263e5761263e612615565b60006020828403121561274e57600080fd5b8151801515811461240f57600080fd5b602081526000825180602084015261277d816040850160208701612696565b601f01601f1916919091016040019291505056fea164736f6c6343000811000a",
  "devdoc": {
    "author": "Wrap That Potassium <wrap-that-potassium@protonmail.com>",
    "details": "inspired by Beefy contract https://github.com/beefyfinance/beefy-contracts/blob/master/contracts/BIFI/zaps/BeefyZapUniswapV2.txt",
    "kind": "dev",
    "methods": {
      "estimateSwap(address,uint256)": {
        "params": {
          "fullInvestmentIn": "the input amount",
          "tokenIn": "the input token"
        },
        "returns": {
          "swapAmountIn": "the input amount which would be swapped",
          "swapAmountOut": "the output amount after such a swap",
          "swapTokenOut": "the address of the output token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "zapInFromETH(uint256)": {
        "params": {
          "tokenAmountOutMin": "the minimum amount of the other token from the pair expected with the swap"
        }
      },
      "zapInFromToken(address,uint256,uint256)": {
        "details": "this function assumes an approval for `tokenId` was done previously for this contract",
        "params": {
          "tokenAmountOutMin": "the minimum amount of the other token from the pair expected with the swap",
          "tokenIn": "the token to zap in from",
          "tokenInAmount": "the amount of `tokenIn` to create liquidity from"
        }
      },
      "zapInFromTokenWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "deadline for the swap",
          "r": "permit signature",
          "s": "permit signature",
          "tokenAmountOutMin": "the minimum amount of the other token from the pair expected with the swap",
          "tokenIn": "the token to zap in from",
          "tokenInAmount": "the amount of `tokenIn` to create liquidity from",
          "v": "permit signature"
        }
      },
      "zapOutToToken(uint256,address,uint256)": {
        "details": "this function assumes an approval for `tokenId` was done previously for this contract",
        "params": {
          "desiredToken": "the token to zap out to",
          "desiredTokenOutMin": "the minimum amount of the other token from the pair expected with the swap",
          "withdrawAmount": "amount of LP to withdraw"
        }
      },
      "zapOutToTokenWithPermit(uint256,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "deadline for the swap",
          "desiredToken": "the token to zap out to",
          "desiredTokenOutMin": "the minimum amount of the other token from the pair expected with the swap",
          "r": "permit signature",
          "s": "permit signature",
          "v": "permit signature",
          "withdrawAmount": "amount of LP to withdraw"
        }
      }
    },
    "title": "Zap in/out contract for wBAN farms",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimateSwap(address,uint256)": {
        "notice": "Estimate a swap from `tokenIn` for amount `fullInvestmentIn`"
      },
      "zapInFromETH(uint256)": {
        "notice": "Zap in from \"ETH\"."
      },
      "zapInFromToken(address,uint256,uint256)": {
        "notice": "Zap in from token `tokenId`."
      },
      "zapInFromTokenWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Zap in from token `tokenId`, using permit feature (EIP-2612)."
      },
      "zapOutToToken(uint256,address,uint256)": {
        "notice": "Zap out to token `desiredToken`."
      },
      "zapOutToTokenWithPermit(uint256,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Zap out to token `desiredToken`, using permit feature (EIP-2612) of the LP token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/WBANFarmZap.sol:WBANFarmZap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/WBANFarmZap.sol:WBANFarmZap",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}